// you can write to stdout for debugging purposes, e.g.
// printf("this is a debug message\n");
int removeTrivialNested(char* S, int high){
    if(high<=0){
        return 0;
    }
    char S1,S2;
    int count1=1, count2=0;
    S1=*S;
    switch (S1){
        case ('('):
            S2=')';
            break;
        case ('['):
            S2=']';
            break;
        case ('{'):
            S2='}';
            break;
        default:
            S2='0';
            return 0;
            break;
    }
    while(*(S+count1)==S1 && count1<=high){
        ++count1;
    }
    while(*(S+count1+count2)==S2 && count1+count2<=high){
        ++count2;
    }
    if(count1==count2){
        return count1+count2;
    }
    else{
        return 0;
    }


}
int isNested(char * S, int low, int high){
    if(low>high){
        return 1;
    }
    if((high-low)%2==0){
        return 0;
    }
    char S1, S2;
    int flag1=0, flag2=0, indx=low+1, count=1;
    S1=*(S+high);
    if(S1=='(' || S1=='{' || S1=='['){
        return 0;
    }
    S1=*(S+low);
    switch (S1){
        case ('('):
            S2=')';
            break;
        case ('['):
            S2=']';
            break;
        case ('{'):
            S2='}';
            break;
        default:
            S2='0';
            break;
    }
    if(S2=='0'){
        return 0;
    }
    while(indx<=high){
        if(*(S+indx)==S1){
            ++count;
        }
        if(*(S+indx)==S2){
            --count;
        }
        if(count<=0){
            break;
        }
        ++indx;
    }
    if(indx<=high && *(S+indx)==S2){
        flag1=isNested(S,low+1,indx-1);
        if(flag1==0){
            return 0;
        }
        flag2=isNested(S,indx+1,high);
        return flag2;
    }
    else{
        return 0;
    }
}
int solution(char *S) {
    // Implement your solution here
    int N=0, flag;
    while(*(S+N)!='\0'){
        ++N;
    }
    int low=removeTrivialNested(S,N-1);
    flag=isNested(S,low,N-1);
    return flag;
}
