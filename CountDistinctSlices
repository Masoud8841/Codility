// you can write to stdout for debugging purposes, e.g.
// printf("this is a debug message\n");
int find_unique_sequence(int*, int*, int, int);
void check_const_array(int*, int, int*, int*);
int solution(int M, int A[], int N) {
    // Implement your solution here
    M=A[0];
    int minA=A[0];
    for(int i=1;i<N;++i){
        if(M<A[i]){
            M=A[i];
        }
        if(minA>A[i]){
            minA=A[i];
        }
    }
    const int maxCount=1000000000; 
    int countUnique=0, indx=-1;
    if(M==0){
        return N;
    }
    if(minA==M){
        return N;
    }
    int B[M+1];
    for(int i=0;i<=M;i++){
        B[i]=-1;
    }

    for(int i=0;i<N;i++){
        check_const_array(A,N,&i,&countUnique);
        if(indx==N-1){
            countUnique+=indx-i+1;
        }
        else if(indx>i && A[i-1]!=A[indx+1]){
            countUnique+=indx-i+1;
        }
        else if(indx>i && A[i]==A[indx+2]){
            ++indx;
            countUnique+=indx-i+1;
        }
        else{
            //printf("A[%d] is %d \n",i,A[i]);
            indx=find_unique_sequence(A,B,N,i);
            countUnique+=indx-i+1; 
        }
        
        if(countUnique>maxCount){
            return maxCount;
        }
        //printf("[i, indx, count]=[%d,%d,%d]\n",i,indx,countUnique);
    }
    return countUnique;
}


int find_unique_sequence(int A[], int B[], int N, int i){
    int indx=i;
    while(B[A[indx]]<i){
        B[A[indx]]=i;
        ++indx;
        if(indx==N){
            break;
        }
    }
    return indx-1;
}
void check_const_array(int A[], int N, int* i, int* countUnique){
    int j=*i, count=0;
    while(j<N-1 && A[j]==A[j+1]){
        ++count;
        ++j;
    }
    *countUnique+=count;
    *i=j;
    return;
}
