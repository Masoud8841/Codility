// you can write to stdout for debugging purposes, e.g.
// printf("this is a debug message\n");
int max_element(int*,int);
void zeros(int*, int);
int is_cube(int);

struct Results solution(int N, int P[], int Q[], int M) {
    // Implement your solution here
    int* A=(int *) malloc(M*sizeof(int));
    struct Results result;
    result.A = A;
    result.M = M;

    int maxQ=max_element(Q,M);
    int C[maxQ+1], temp;
    zeros(C,maxQ+1);
    for(int i=2;i<maxQ+1;i++){
        temp=maxQ/i;
        for(int j=1;j<=temp;j++){
            ++C[j*i];
        }
    }
    temp=0;
    int flag=1;
    for(int i=0;i<maxQ+1;i++){
        flag=is_cube(i);
        if((C[i]==2 || C[i]==3)&& flag==0){
            C[i]=temp+1;
            ++temp;
        }
        else{
            C[i]=temp;
        }
        //printf("C[%d]=%d\n",i,C[i]);
    }
    for(int i=0;i<M;i++){
        A[i]=C[Q[i]]-C[P[i]-1];
    }


    return result;
}

int max_element(int A[], int N){
    int max=A[0];
    for(int i=1;i<N;i++){
        if(max<A[i]){
            max=A[i];
        }
    }
    return max;
}
void zeros(int A[], int N){
    for(int i=0;i<N;i++){
        A[i]=0;
    }
    return;
}
int is_cube(int N){
    int left=0, right=100, mid, cube;
    if(left*left*left==N || right*right*right==N){
        return 1;
    }
    while(right-left>1){
        mid=(right+left)/2;
        cube=mid*mid*mid;
        if(cube>N){
            right=mid;
        }
        else if(cube<N){
            left=mid;
        }
        else{
            return 1;
        }
    }
    return 0;
}
