// you can write to stdout for debugging purposes, e.g.
// printf("this is a debug message\n");
void shiftOnce(int B[][2], int indx, int count){
    for(int i=count;i>indx;--i){
        B[i][0]=B[i-1][0];
        B[i][1]=B[i-1][1];
    }
}
void findIndx(int B[][2], int A[], int i, int* count, int* maxFreq, int N){
    int p=0,q=*count-1,z;
    if(A[B[q][0]]<=A[i]){
        if(A[B[q][0]]<A[i]){
            if(i>N/2){
                *count=*count+1;
                B[q+1][0]=i;
                B[q+1][1]=1;
            }
        }
        else{
            B[q][1]=B[q][1]+1;
            if(B[q][1]>B[*maxFreq][1]){
                *maxFreq=q;
            }
        }
        return;
    }
    if(A[B[p][0]]>=A[i]){
        if(A[B[p][0]]>A[i]){
            if(i>N/2){
                shiftOnce(B,p,*count);
                if(*maxFreq>=p){
                    *maxFreq=*maxFreq+1;
                }
                *count=*count+1;
                B[p][0]=i;
                B[p][1]=1;
            }
        }
        else{
            B[p][1]=B[p][1]+1;
            if(B[p][1]>B[*maxFreq][1]){
                *maxFreq=p;
            }
        }
        return;
    }
    while(p<q){
        z=(p+q)/2;
        if(z==p){
            break;
        }
        if(A[B[z][0]]<A[i]){
            p=z;
        }
        else if(A[B[z][0]]>A[i]){
            q=z;
        }
        else{
            B[z][1]=B[z][1]+1;
            if(B[z][1]>B[*maxFreq][1]){
                *maxFreq=z;
            }
            return;
        }
    }
    if(i>N/2){
        if(A[B[p][0]]<A[i]){
            shiftOnce(B,p+1,*count);
            if(*maxFreq>=p+1){
                *maxFreq=*maxFreq+1;
            }
            *count=*count+1;
            B[p+1][0]=i;
            B[p+1][1]=1;
        }
        else if(A[B[p][0]]>A[i]){
            shiftOnce(B,p,*count);
            if(*maxFreq>=p){
                *maxFreq=*maxFreq+1;
            }
            *count=*count+1;
            B[p][0]=i;
            B[p][1]=1;
        }
    }
    return;
}

void findPlace(int B[][2],int A[], int i, int* count, int* maxFreq, int N){
    if(A[i]==A[B[*maxFreq][0]]){
        B[*maxFreq][1]=B[*maxFreq][1]+1;
    }
    else{
        findIndx(B,A,i,count,maxFreq,N);
    }
    return;
}

int solution(int A[], int N) {
    // Implement your solution here
    if(N==0){
        return -1;
    }
    if(N==1){
        return 0;
    }
    int NN=N/2;
    int B[NN+2][2];
    int count=1;
    B[0][0]=0;
    B[0][1]=1;
    int maxFreq=0;
    for(int i=N-1;i>0;--i){
        findPlace(B,A,i,&count,&maxFreq,N);
        if(count>NN+1){
            return -1;
        }
        if(B[maxFreq][1]+i+1<=NN){
            return -1;
        }
    }
    if(B[maxFreq][1]>NN){
        return B[maxFreq][0];
    }
    else{
            return -1;
    }
}
