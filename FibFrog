// you can write to stdout for debugging purposes, e.g.
// printf("this is a debug message\n");
int minVal(int a, int b){
    if(a<b){
        return a;
    }
    else{
        return b;
    }
}
void removeDeadEnds(int A[],int N, int FiboSeq[], int FiboN){
    int flag=0;
    for(int i=N-1;i>=0;--i){
        flag=0;
        for(int j=1;j<FiboN;++j){
            if(i+FiboSeq[j]<=N){
                if(i+FiboSeq[j]==N){
                    flag=1;
                    break;
                }
                else if(A[i+FiboSeq[j]]==1){
                    flag=1;
                    break;
                }
            }
            else{
                flag=0;
                break;
            }
        }
        if(flag==0){
            A[i]=0;
        }
    }
    return;
}
void removeDeadStarts(int A[],int N, int FiboSeq[], int FiboN){
    int flag=0;
    for(int i=0;i<N;++i){
        flag=0;
        for(int j=1;j<FiboN;++j){
            if(i-FiboSeq[j]>=-1){
                if(i-FiboSeq[j]==-1){
                    flag=1;
                    break;
                }
                else if(A[i-FiboSeq[j]]==1){
                    flag=1;
                    break;
                }
            }
            else{
                flag=0;
                break;
            }
        }
        if(flag==0){
            A[i]=0;
        }
    }
    return;
}
int findShortestPassForward(int A[],int N,int i,int FiboSeq[],int FiboN){
    int flag=0;
    for(int j=1;j<FiboN;++j){
        if(i+FiboSeq[j]<=N){
            if(i+FiboSeq[j]==N){
                A[i]=1;
                flag=1;
                return flag;
            }
            else if(A[i+FiboSeq[j]]!=0){
                if(A[i]==1){
                    A[i]=1+A[i+FiboSeq[j]];
                    flag=1;
                }
                else{
                    A[i]=minVal(A[i],1+A[i+FiboSeq[j]]);
                    flag=1;
                }
            }
        }
        else{
            return flag;
        }
    }
    return;
}
int solution(int A[], int N) {
    if(N==0){
        return 1;
    }
    // Implement your solution here
    int FiboN=26;
    int FiboSeq[FiboN];
    FiboSeq[0]=0;
    FiboSeq[1]=1;
    for(int i=2;i<FiboN;++i){
        FiboSeq[i]=FiboSeq[i-1]+FiboSeq[i-2];
        //printf("Fibo[%d]=%d\n",i,FiboSeq[i]);
    }
    removeDeadStarts(A,N,FiboSeq,FiboN);
    removeDeadEnds(A,N,FiboSeq,FiboN);
    int B[N+1];
    for(int i=1;i<N+1;++i){
        B[i]=A[i-1];
    }
    B[0]=1;
    int NN=N+1, flag=0;
    for(int i=NN-1;i>=0;--i){
        if(B[i]!=0){
            flag=findShortestPassForward(B,NN,i,FiboSeq,FiboN);
            //printf("shortest for A[%d] is %d \n",i-1,B[i]);
        }
    }
    if(flag==1){
        return B[0];
    }
    else{
        return -1;
    }
    
}
