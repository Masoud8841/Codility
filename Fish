// you can write to stdout for debugging purposes, e.g.
// printf("this is a debug message\n");
int fishCrossing(int B[], int N){
    for(int i=0;i<N-1;++i){
        if(B[i]>B[i+1]){
            return 1;
        }
    }
    return 0;
}
int cleanArray(int A[], int B[], int N){
    int count=0;
    if(N<=0){
        return N;
    }
    for(int i=1;i<N;++i){
        if(A[i]!=A[count]){
            A[count+1]=A[i];
            B[count+1]=B[i];
            ++count;
        }
    }
    return count+1;
}
void moveFish(int A[], int B[], int* N){
    int i,indx=0, count;
    do{
        for(i=indx;i<*N-1;++i){
            if(B[i]==1 && B[i+1]==0){
                indx=i;
                break;
            }
        }
        if(i==*N-2 && indx!=i){
            break;
        }
        count=0;
        while(B[indx+count]==1 && B[indx+count+1]==0 && indx+count<=*N-2){
            if(A[indx+count]>A[indx+count+1]){
                B[indx+count+1]=1;
                A[indx+count+1]=A[indx+count];
                ++count;
            }
            else{
                B[indx+count]=0;
                A[indx+count]=A[indx+count+1];
                indx=indx+count-1;
                if(indx<0){
                    indx=0;
                }
                break;
            }
        }
    }
    while(i<*N-1);
    int newN=cleanArray(A,B,*N);
    *N=newN;
    return;
}
int solution(int A[], int B[], int N) {
    // Implement your solution here
    int flag=fishCrossing(B,N);
    if(flag==0){
        return N;
    }
    moveFish(A,B,&N);
    return N;
}
