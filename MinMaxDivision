// you can write to stdout for debugging purposes, e.g.
// printf("this is a debug message\n");
int sum_array(int*,int,int);
int initial_guess(int*, int, int);
int check_new_max_feasibility(int*, int, int, int);

int solution(int K, int M, int A[], int N) {
    // Implement your solution here
    if(K==1){
        return sum_array(A,0,N);
    }
    if(N==1){
        return A[0];
    }
    if(M==0){
        return 0;
    }
    int flag=check_new_max_feasibility(A,N,K,M);
    if(flag==1){
        return M;
    }
    int maxSumK=initial_guess(A,N,K);
    int rightLimit=maxSumK, leftLimit=M;
    while(rightLimit-leftLimit>1){
        maxSumK=(rightLimit+leftLimit)/2;
        flag=check_new_max_feasibility(A,N,K,maxSumK);
        if(flag==1){
            rightLimit=maxSumK;
        }
        else{
            leftLimit=maxSumK;
        }
    }
    flag=check_new_max_feasibility(A,N,K,rightLimit-1);
    if(flag==1){
        rightLimit--;
    }
    return rightLimit;
}

//////////////////////////////////////
int sum_array(int A[], int i, int j){
    int sumVal=0;
    for(int k=i;k<j;k++){
        sumVal+=A[k];
    }
    return sumVal;
}
//////////////////////////////////////
int initial_guess(int A[], int N, int K){
    int sumA=sum_array(A,0,N);
    int avgA=1+(sumA/K);
    int countSections=0, maxSecVal=avgA, currentSecVal=0, indx=0;
    for(int i=0;i<N;i++){
        if (currentSecVal+A[i]<=maxSecVal) {
        currentSecVal+=A[i];
        }
        else{
            ++countSections;
            currentSecVal=A[i];
            if(currentSecVal>maxSecVal){
                maxSecVal=currentSecVal;
            }
        }
        if(countSections==K-1){
            indx=i;
            break;
        }
    }
    if(countSections==K-1){
        currentSecVal=sum_array(A,indx,N);
        if(currentSecVal>maxSecVal){
            maxSecVal=currentSecVal;
        }
    }
    return maxSecVal;
}
///////////////////////////////////////
int check_new_max_feasibility(int A[], int N, int K, int maxSec){
    int currentSum=0, countSectors=0, flag=1, indx=0;
    for(int i=0;i<N;i++){
        if(currentSum+A[i]<=maxSec){
            currentSum+=A[i];
        }
        else{
            currentSum=A[i];
            if(currentSum>maxSec){
                flag=0;
                return flag;
            }
            ++countSectors;
        }
        if(countSectors==K-1){
            indx=i;
            break;
        }
    }
    if(countSectors==K-1){
        currentSum=sum_array(A,indx,N);
        if(currentSum>maxSec){
            flag=0;
        }
    }
    
    return flag;
}
